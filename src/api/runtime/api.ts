/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Fut Bot
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AccountAggreagationViewModel
 */
export interface AccountAggreagationViewModel {
    /**
     * 
     * @type {number}
     * @memberof AccountAggreagationViewModel
     */
    count?: number;
}

/**
 * 
 * @export
 * @interface AccountSettings
 */
export interface AccountSettings {
    /**
     * 
     * @type {number}
     * @memberof AccountSettings
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof AccountSettings
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountSettings
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountSettings
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountSettings
     */
    guid?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AccountSettings
     */
    active?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AccountSettings
     */
    boughtOctofutiums?: number;
    /**
     * 
     * @type {number}
     * @memberof AccountSettings
     */
    totalExecutionTime?: number;
    /**
     * 
     * @type {string}
     * @memberof AccountSettings
     */
    activationCode?: string;
    /**
     * 
     * @type {Array<BotSettings>}
     * @memberof AccountSettings
     */
    settings?: Array<BotSettings>;
    /**
     * 
     * @type {Array<SellingApiSettings>}
     * @memberof AccountSettings
     */
    apiSettings?: Array<SellingApiSettings>;
    /**
     * 
     * @type {string}
     * @memberof AccountSettings
     */
    apiEnabledPlatforms?: ApiEnabledPlatformsEnum;
    /**
     * 
     * @type {AccountSettings}
     * @memberof AccountSettings
     */
    referer?: AccountSettings;
    /**
     * 
     * @type {string}
     * @memberof AccountSettings
     */
    referalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountSettings
     */
    role?: RoleEnum;
    /**
     * 
     * @type {Date}
     * @memberof AccountSettings
     */
    creationDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AccountSettings
     */
    lastLogOn?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof AccountSettings
     */
    runSellingApiOnStatup?: boolean;
}

/**
 * @export
 * @enum {string}
 */
export enum RoleEnum {
    User = <any>'User',
    Administrator = <any>'Administrator'
}
/**
 * 
 * @export
 * @interface AccountSettingsViewModel
 */
export interface AccountSettingsViewModel {
    /**
     * 
     * @type {Array<SellingApiSettingsViewModel>}
     * @memberof AccountSettingsViewModel
     */
    apiSettings?: Array<SellingApiSettingsViewModel>;
    /**
     * 
     * @type {string}
     * @memberof AccountSettingsViewModel
     */
    apiEnabledPlatforms?: ApiEnabledPlatformsEnum;
    /**
     * 
     * @type {boolean}
     * @memberof AccountSettingsViewModel
     */
    runSellingApiOnStatup?: boolean;
}

export enum ApiEnabledPlatformsEnum {
    Ps3 = <any>'Ps3',
    Ps4 = <any>'Ps4',
    Xbox360 = <any>'Xbox360',
    XboxOne = <any>'XboxOne',
    Pc = <any>'Pc',
    Switch = <any>'Switch'
}
/**
 * 
 * @export
 * @interface ActiveSellingApiViewModel
 */
export interface ActiveSellingApiViewModel {
    /**
     * 
     * @type {AccountSettingsViewModel}
     * @memberof ActiveSellingApiViewModel
     */
    settings?: AccountSettingsViewModel;
    /**
     * 
     * @type {boolean}
     * @memberof ActiveSellingApiViewModel
     */
    isRunning?: boolean;
    /**
     * 
     * @type {Array<AuctionViewModel>}
     * @memberof ActiveSellingApiViewModel
     */
    pendingAuctions?: Array<AuctionViewModel>;
}

/**
 * 
 * @export
 * @interface AuctionViewModel
 */
export interface AuctionViewModel {
    /**
     * 
     * @type {PlayerCardViewModel}
     * @memberof AuctionViewModel
     */
    playerCard?: PlayerCardViewModel;
    /**
     * 
     * @type {number}
     * @memberof AuctionViewModel
     */
    currentBid?: number;
    /**
     * 
     * @type {number}
     * @memberof AuctionViewModel
     */
    buyNowPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof AuctionViewModel
     */
    expires?: number;
}

/**
 * 
 * @export
 * @interface BackupCode
 */
export interface BackupCode {
    /**
     * 
     * @type {number}
     * @memberof BackupCode
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof BackupCode
     */
    value?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BackupCode
     */
    isUsed?: boolean;
}

/**
 * 
 * @export
 * @interface BotSettings
 */
export interface BotSettings {
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    guid?: string;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    shopListSettingsId?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    accountSettingsId?: number;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    secretAnswer?: string;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    platform?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    appVersion?: number;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    fetchEmail?: string;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    fetchPassword?: string;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    fetchHost?: string;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    fetchPort?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BotSettings
     */
    fetchIsSSL?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    codeFetchingMode?: CodeFetchingModeEnum;
    /**
     * 
     * @type {Array<BackupCode>}
     * @memberof BotSettings
     */
    backupCodes?: Array<BackupCode>;
    /**
     * 
     * @type {boolean}
     * @memberof BotSettings
     */
    autoSolveCaptchas?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    mode?: ModeEnum;
    /**
     * 
     * @type {Array<BuyTreshold>}
     * @memberof BotSettings
     */
    buyTresholds?: Array<BuyTreshold>;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    overSellingSteps?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    buyingOtherwisePercentage?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BotSettings
     */
    registerSoldItems?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    maxNumberOfSameCard?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BotSettings
     */
    useSchedule?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    maxRequestCountBySession?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    minRestingDelay?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    maxRestingDelay?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    minDelayBetweenRequests?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    maxDelayBetweenRequests?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    maxOrderSpent?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BotSettings
     */
    shouldHandleOrders?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BotSettings
     */
    sellCoinsToExternalApis?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    minCoinsToTransferCoins?: number;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot0?: Slot0Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot1?: Slot1Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot2?: Slot2Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot3?: Slot3Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot4?: Slot4Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot5?: Slot5Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot6?: Slot6Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot7?: Slot7Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot8?: Slot8Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot9?: Slot9Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot10?: Slot10Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot11?: Slot11Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot12?: Slot12Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot13?: Slot13Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot14?: Slot14Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot15?: Slot15Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot16?: Slot16Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot17?: Slot17Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot18?: Slot18Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot19?: Slot19Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot20?: Slot20Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot21?: Slot21Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot22?: Slot22Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot23?: Slot23Enum;
}


export enum CodeFetchingModeEnum {
    IMAP = <any>'IMAP',
    BackupCodes = <any>'BackupCodes',
    Manual = <any>'Manual'
}
/**
 * @export
 * @enum {string}
 */
export enum ModeEnum {
    PlayerSnipping = <any>'PlayerSnipping',
    PlayerBidding = <any>'PlayerBidding',
    SquadFormSnipping = <any>'SquadFormSnipping',
    TradeOnly = <any>'TradeOnly'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot0Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot1Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot2Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot3Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot4Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot5Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot6Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot7Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot8Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot9Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot10Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot11Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot12Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot13Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot14Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot15Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot16Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot17Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot18Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot19Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot20Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot21Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot22Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot23Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}

/**
 * 
 * @export
 * @interface BotSettingsViewModel
 */
export interface BotSettingsViewModel {
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    guid?: string;
    /**
     * 
     * @type {number}
     * @memberof BotSettingsViewModel
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettingsViewModel
     */
    shopListId?: number;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    secretAnswer?: string;
    /**
     * 
     * @type {number}
     * @memberof BotSettingsViewModel
     */
    platform?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettingsViewModel
     */
    appVersion?: number;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    fetchEmail?: string;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    fetchPassword?: string;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    fetchHost?: string;
    /**
     * 
     * @type {number}
     * @memberof BotSettingsViewModel
     */
    fetchPort?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BotSettingsViewModel
     */
    fetchIsSSL?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    codeFetchingMode?: CodeFetchingModeEnum;
    /**
     * 
     * @type {Array<BackupCode>}
     * @memberof BotSettingsViewModel
     */
    backupCodes?: Array<BackupCode>;
    /**
     * 
     * @type {boolean}
     * @memberof BotSettingsViewModel
     */
    autoSolveCaptchas?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    mode?: ModeEnum;
    /**
     * 
     * @type {Array<BuyTreshold>}
     * @memberof BotSettingsViewModel
     */
    buyTresholds?: Array<BuyTreshold>;
    /**
     * 
     * @type {boolean}
     * @memberof BotSettingsViewModel
     */
    registerSoldItems?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BotSettingsViewModel
     */
    overSellingSteps?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettingsViewModel
     */
    buyingOtherwisePercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettingsViewModel
     */
    maxNumberOfSameCard?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BotSettingsViewModel
     */
    useSchedule?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BotSettingsViewModel
     */
    maxRequestCountBySession?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettingsViewModel
     */
    minRestingDelay?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettingsViewModel
     */
    maxRestingDelay?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettingsViewModel
     */
    minDelayBetweenRequests?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettingsViewModel
     */
    maxDelayBetweenRequests?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettingsViewModel
     */
    maxOrderSpent?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BotSettingsViewModel
     */
    shouldHandleOrders?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BotSettingsViewModel
     */
    sellCoinsToExternalApis?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BotSettingsViewModel
     */
    minCoinsToTransferCoins?: number;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot0?: Slot0Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot1?: Slot1Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot2?: Slot2Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot3?: Slot3Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot4?: Slot4Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot5?: Slot5Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot6?: Slot6Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot7?: Slot7Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot8?: Slot8Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot9?: Slot9Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot10?: Slot10Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot11?: Slot11Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot12?: Slot12Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot13?: Slot13Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot14?: Slot14Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot15?: Slot15Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot16?: Slot16Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot17?: Slot17Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot18?: Slot18Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot19?: Slot19Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot20?: Slot20Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot21?: Slot21Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot22?: Slot22Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettingsViewModel
     */
    slot23?: Slot23Enum;
}

/**
 * 
 * @export
 * @interface BotViewModel
 */
export interface BotViewModel {
    /**
     * 
     * @type {string}
     * @memberof BotViewModel
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof BotViewModel
     */
    coins?: number;
    /**
     * 
     * @type {string}
     * @memberof BotViewModel
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof BotViewModel
     */
    additionalInformations?: string;
    /**
     * 
     * @type {number}
     * @memberof BotViewModel
     */
    requestCount?: number;
    /**
     * 
     * @type {Date}
     * @memberof BotViewModel
     */
    lastActivityTime?: Date;
    /**
     * 
     * @type {BotSettingsViewModel}
     * @memberof BotViewModel
     */
    settings?: BotSettingsViewModel;
}

/**
 * 
 * @export
 * @interface BuyTreshold
 */
export interface BuyTreshold {
    /**
     * 
     * @type {number}
     * @memberof BuyTreshold
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof BuyTreshold
     */
    treshold?: number;
    /**
     * 
     * @type {number}
     * @memberof BuyTreshold
     */
    steps?: number;
}

/**
 * 
 * @export
 * @interface CardToUseInOrderViewModel
 */
export interface CardToUseInOrderViewModel {
    /**
     * 
     * @type {PlayerCardViewModel}
     * @memberof CardToUseInOrderViewModel
     */
    playerCard?: PlayerCardViewModel;
    /**
     * 
     * @type {number}
     * @memberof CardToUseInOrderViewModel
     */
    maxBuyNow?: number;
    /**
     * 
     * @type {number}
     * @memberof CardToUseInOrderViewModel
     */
    suggestedBuyPrice?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CardToUseInOrderViewModel
     */
    discard?: boolean;
}

/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    password?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LoginRequest
     */
    requireElevated?: boolean;
}

/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    tokenType?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    accessToken?: string;
    /**
     * 
     * @type {number}
     * @memberof LoginResponse
     */
    expiresIn?: number;
    /**
     * 
     * @type {boolean}
     * @memberof LoginResponse
     */
    success?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    errorMessage?: string;
    /**
     * 
     * @type {AccountSettings}
     * @memberof LoginResponse
     */
    settings?: AccountSettings;
    /**
     * 
     * @type {ServerInfo}
     * @memberof LoginResponse
     */
    serverInfo?: ServerInfo;
}

/**
 * 
 * @export
 * @interface ModelPackage
 */
export interface ModelPackage {
    /**
     * 
     * @type {number}
     * @memberof ModelPackage
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelPackage
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelPackage
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelPackage
     */
    octofutiumsAmount?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelPackage
     */
    price?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ModelPackage
     */
    isActive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ModelPackage
     */
    isLimited?: boolean;
}

/**
 * 
 * @export
 * @interface OrderViewModel
 */
export interface OrderViewModel {
    /**
     * 
     * @type {PlayerCardViewModel}
     * @memberof OrderViewModel
     */
    playerCard?: PlayerCardViewModel;
    /**
     * 
     * @type {number}
     * @memberof OrderViewModel
     */
    startPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderViewModel
     */
    buyNowPrice?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderViewModel
     */
    state?: StateEnum;
    /**
     * 
     * @type {Date}
     * @memberof OrderViewModel
     */
    handlingTime?: Date;
    /**
     * 
     * @type {Date}
     * @memberof OrderViewModel
     */
    registerTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof OrderViewModel
     */
    handlerBot?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderViewModel
     */
    transaction?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderViewModel
     */
    suggestedBuyPrice?: number;
}

export enum StateEnum {
    Pending = <any>'Pending',
    Handled = <any>'Handled',
    Bought = <any>'Bought',
    Ambiguous = <any>'Ambiguous',
    NotFound = <any>'NotFound',
    UnknownError1 = <any>'UnknownError1',
    UnknownError2 = <any>'UnknownError2',
    UnknownError3 = <any>'UnknownError3'
}

/**
 * 
 * @export
 * @interface PlayerCardViewModel
 */
export interface PlayerCardViewModel {
    /**
     * 
     * @type {number}
     * @memberof PlayerCardViewModel
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof PlayerCardViewModel
     */
    commonName?: string;
    /**
     * 
     * @type {string}
     * @memberof PlayerCardViewModel
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof PlayerCardViewModel
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof PlayerCardViewModel
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof PlayerCardViewModel
     */
    leagueId?: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerCardViewModel
     */
    nationId?: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerCardViewModel
     */
    clubId?: number;
    /**
     * 
     * @type {string}
     * @memberof PlayerCardViewModel
     */
    clubImageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof PlayerCardViewModel
     */
    nationImageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof PlayerCardViewModel
     */
    imageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof PlayerCardViewModel
     */
    position?: string;
    /**
     * 
     * @type {string}
     * @memberof PlayerCardViewModel
     */
    playStyle?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PlayerCardViewModel
     */
    isIcon?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PlayerCardViewModel
     */
    quality?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PlayerCardViewModel
     */
    isSpecialType?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PlayerCardViewModel
     */
    baseId?: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerCardViewModel
     */
    rating?: number;
}

/**
 * 
 * @export
 * @interface Purchase
 */
export interface Purchase {
    /**
     * 
     * @type {number}
     * @memberof Purchase
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof Purchase
     */
    purchaseDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof Purchase
     */
    accountId?: number;
    /**
     * 
     * @type {AccountSettings}
     * @memberof Purchase
     */
    account?: AccountSettings;
    /**
     * 
     * @type {ModelPackage}
     * @memberof Purchase
     */
    purchasedPackage?: ModelPackage;
}

/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    passwordConfirmation?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    verification?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    referalCode?: string;
}

/**
 * 
 * @export
 * @interface RegisterResponse
 */
export interface RegisterResponse {
    /**
     * 
     * @type {boolean}
     * @memberof RegisterResponse
     */
    success?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RegisterResponse
     */
    errorMessage?: string;
}

/**
 * 
 * @export
 * @interface ReverseOrderViewModel
 */
export interface ReverseOrderViewModel {
    /**
     * 
     * @type {PlayerCardViewModel}
     * @memberof ReverseOrderViewModel
     */
    playerCard?: PlayerCardViewModel;
    /**
     * 
     * @type {number}
     * @memberof ReverseOrderViewModel
     */
    buyNowPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof ReverseOrderViewModel
     */
    buyPrice?: number;
    /**
     * 
     * @type {Date}
     * @memberof ReverseOrderViewModel
     */
    registerTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof ReverseOrderViewModel
     */
    transaction?: string;
    /**
     * 
     * @type {number}
     * @memberof ReverseOrderViewModel
     */
    tradeId?: number;
}

/**
 * 
 * @export
 * @interface SellingApiSettings
 */
export interface SellingApiSettings {
    /**
     * 
     * @type {AccountSettings}
     * @memberof SellingApiSettings
     */
    accountSettings?: AccountSettings;
    /**
     * 
     * @type {number}
     * @memberof SellingApiSettings
     */
    accountSettingsId?: number;
    /**
     * 
     * @type {number}
     * @memberof SellingApiSettings
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SellingApiSettings
     */
    apiType?: ApiTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SellingApiSettings
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof SellingApiSettings
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof SellingApiSettings
     */
    apiKey?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum ApiTypeEnum {
    GameTradeEasy = <any>'GameTradeEasy',
    Sugar = <any>'Sugar'
}

/**
 * 
 * @export
 * @interface SellingApiSettingsViewModel
 */
export interface SellingApiSettingsViewModel {
    /**
     * 
     * @type {string}
     * @memberof SellingApiSettingsViewModel
     */
    apiType?: ApiTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SellingApiSettingsViewModel
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof SellingApiSettingsViewModel
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof SellingApiSettingsViewModel
     */
    apiKey?: string;
}


/**
 * 
 * @export
 * @interface ServerInfo
 */
export interface ServerInfo {
    /**
     * 
     * @type {number}
     * @memberof ServerInfo
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ServerInfo
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ServerInfo
     */
    runtimeUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ServerInfo
     */
    statsUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ServerInfo
     */
    webSocketUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof ServerInfo
     */
    maxAccounts?: number;
    /**
     * 
     * @type {number}
     * @memberof ServerInfo
     */
    currentAccountsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof ServerInfo
     */
    currentBotsCount?: number;
}

/**
 * 
 * @export
 * @interface SimpleBotSettingsViewModel
 */
export interface SimpleBotSettingsViewModel {
    /**
     * 
     * @type {number}
     * @memberof SimpleBotSettingsViewModel
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SimpleBotSettingsViewModel
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof SimpleBotSettingsViewModel
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof SimpleBotSettingsViewModel
     */
    secretAnswer?: string;
    /**
     * 
     * @type {number}
     * @memberof SimpleBotSettingsViewModel
     */
    platform?: number;
    /**
     * 
     * @type {Array<BackupCode>}
     * @memberof SimpleBotSettingsViewModel
     */
    backupCodes?: Array<BackupCode>;
    /**
     * 
     * @type {string}
     * @memberof SimpleBotSettingsViewModel
     */
    codeFetchingMode?: CodeFetchingModeEnum;
}

/**
 * 
 * @export
 * @interface TransactionReviewViewModel
 */
export interface TransactionReviewViewModel {
    /**
     * 
     * @type {number}
     * @memberof TransactionReviewViewModel
     */
    availableCoins?: number;
    /**
     * 
     * @type {number}
     * @memberof TransactionReviewViewModel
     */
    availableTransferableCoins?: number;
    /**
     * 
     * @type {number}
     * @memberof TransactionReviewViewModel
     */
    availableBots?: number;
    /**
     * 
     * @type {number}
     * @memberof TransactionReviewViewModel
     */
    openTransactions?: number;
    /**
     * 
     * @type {number}
     * @memberof TransactionReviewViewModel
     */
    potentialTransferredCoins?: number;
}

/**
 * 
 * @export
 * @interface TransactionViewModel
 */
export interface TransactionViewModel {
    /**
     * 
     * @type {number}
     * @memberof TransactionViewModel
     */
    totalAmount?: number;
    /**
     * 
     * @type {Array<OrderViewModel>}
     * @memberof TransactionViewModel
     */
    orders?: Array<OrderViewModel>;
    /**
     * 
     * @type {number}
     * @memberof TransactionViewModel
     */
    takenAmount?: number;
    /**
     * 
     * @type {boolean}
     * @memberof TransactionViewModel
     */
    isOpen?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TransactionViewModel
     */
    guid?: string;
    /**
     * 
     * @type {Date}
     * @memberof TransactionViewModel
     */
    creationDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof TransactionViewModel
     */
    platform?: number;
    /**
     * 
     * @type {boolean}
     * @memberof TransactionViewModel
     */
    isAutonomous?: boolean;
}


/**
 * AdministrationApi - fetch parameter creator
 * @export
 */
export const AdministrationApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [botId] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amIAdmin(botId?: string, page?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/Administration`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (botId !== undefined) {
                localVarQueryParameter['botId'] = botId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsCount(options: any = {}): FetchArgs {
            const localVarPath = `/api/Administration/GetAccountsCount`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsList(options: any = {}): FetchArgs {
            const localVarPath = `/api/Administration/GetAccountsList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBotsCount(options: any = {}): FetchArgs {
            const localVarPath = `/api/Administration/GetBotsCount`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchasesList(options: any = {}): FetchArgs {
            const localVarPath = `/api/Administration/GetPurchasesList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurshasesCount(options: any = {}): FetchArgs {
            const localVarPath = `/api/Administration/GetPurshasesCount`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunningBots(options: any = {}): FetchArgs {
            const localVarPath = `/api/Administration/GetRunningBots`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidBotsCount(options: any = {}): FetchArgs {
            const localVarPath = `/api/Administration/GetValidBotsCount`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdministrationApi - functional programming interface
 * @export
 */
export const AdministrationApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [botId] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amIAdmin(botId?: string, page?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = AdministrationApiFetchParamCreator(configuration).amIAdmin(botId, page, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsCount(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountAggreagationViewModel> {
            const localVarFetchArgs = AdministrationApiFetchParamCreator(configuration).getAccountsCount(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsList(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<AccountSettings>> {
            const localVarFetchArgs = AdministrationApiFetchParamCreator(configuration).getAccountsList(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBotsCount(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountAggreagationViewModel> {
            const localVarFetchArgs = AdministrationApiFetchParamCreator(configuration).getBotsCount(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchasesList(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Purchase>> {
            const localVarFetchArgs = AdministrationApiFetchParamCreator(configuration).getPurchasesList(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurshasesCount(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountAggreagationViewModel> {
            const localVarFetchArgs = AdministrationApiFetchParamCreator(configuration).getPurshasesCount(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunningBots(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountAggreagationViewModel> {
            const localVarFetchArgs = AdministrationApiFetchParamCreator(configuration).getRunningBots(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidBotsCount(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AccountAggreagationViewModel> {
            const localVarFetchArgs = AdministrationApiFetchParamCreator(configuration).getValidBotsCount(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AdministrationApi - factory interface
 * @export
 */
export const AdministrationApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} [botId] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amIAdmin(botId?: string, page?: number, options?: any) {
            return AdministrationApiFp(configuration).amIAdmin(botId, page, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsCount(options?: any) {
            return AdministrationApiFp(configuration).getAccountsCount(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsList(options?: any) {
            return AdministrationApiFp(configuration).getAccountsList(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBotsCount(options?: any) {
            return AdministrationApiFp(configuration).getBotsCount(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchasesList(options?: any) {
            return AdministrationApiFp(configuration).getPurchasesList(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurshasesCount(options?: any) {
            return AdministrationApiFp(configuration).getPurshasesCount(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunningBots(options?: any) {
            return AdministrationApiFp(configuration).getRunningBots(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidBotsCount(options?: any) {
            return AdministrationApiFp(configuration).getValidBotsCount(options)(fetch, basePath);
        },
    };
};

/**
 * AdministrationApi - object-oriented interface
 * @export
 * @class AdministrationApi
 * @extends {BaseAPI}
 */
export class AdministrationApi extends BaseAPI {
    /**
     * 
     * @param {string} [botId] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministrationApi
     */
    public amIAdmin(botId?: string, page?: number, options?: any) {
        return AdministrationApiFp(this.configuration).amIAdmin(botId, page, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministrationApi
     */
    public getAccountsCount(options?: any) {
        return AdministrationApiFp(this.configuration).getAccountsCount(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministrationApi
     */
    public getAccountsList(options?: any) {
        return AdministrationApiFp(this.configuration).getAccountsList(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministrationApi
     */
    public getBotsCount(options?: any) {
        return AdministrationApiFp(this.configuration).getBotsCount(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministrationApi
     */
    public getPurchasesList(options?: any) {
        return AdministrationApiFp(this.configuration).getPurchasesList(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministrationApi
     */
    public getPurshasesCount(options?: any) {
        return AdministrationApiFp(this.configuration).getPurshasesCount(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministrationApi
     */
    public getRunningBots(options?: any) {
        return AdministrationApiFp(this.configuration).getRunningBots(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministrationApi
     */
    public getValidBotsCount(options?: any) {
        return AdministrationApiFp(this.configuration).getValidBotsCount(options)(this.fetch, this.basePath);
    }

}

/**
 * AuthenticationApi - fetch parameter creator
 * @export
 */
export const AuthenticationApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountCount(request?: LoginRequest, options: any = {}): FetchArgs {
            const localVarPath = `/api/Authentication/GetAccountCount`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LoginRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(request?: RegisterRequest, options: any = {}): FetchArgs {
            const localVarPath = `/api/Authentication/Register`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RegisterRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        token(request?: LoginRequest, options: any = {}): FetchArgs {
            const localVarPath = `/api/Authentication/Token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LoginRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [activationCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validate(activationCode?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/Authentication`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (activationCode !== undefined) {
                localVarQueryParameter['activationCode'] = activationCode;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountCount(request?: LoginRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LoginResponse> {
            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).getAccountCount(request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {RegisterRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(request?: RegisterRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RegisterResponse> {
            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).register(request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {LoginRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        token(request?: LoginRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LoginResponse> {
            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).token(request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [activationCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validate(activationCode?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).validate(activationCode, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {LoginRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountCount(request?: LoginRequest, options?: any) {
            return AuthenticationApiFp(configuration).getAccountCount(request, options)(fetch, basePath);
        },
        /**
         * 
         * @param {RegisterRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(request?: RegisterRequest, options?: any) {
            return AuthenticationApiFp(configuration).register(request, options)(fetch, basePath);
        },
        /**
         * 
         * @param {LoginRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        token(request?: LoginRequest, options?: any) {
            return AuthenticationApiFp(configuration).token(request, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [activationCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validate(activationCode?: string, options?: any) {
            return AuthenticationApiFp(configuration).validate(activationCode, options)(fetch, basePath);
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @param {LoginRequest} [request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public getAccountCount(request?: LoginRequest, options?: any) {
        return AuthenticationApiFp(this.configuration).getAccountCount(request, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {RegisterRequest} [request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public register(request?: RegisterRequest, options?: any) {
        return AuthenticationApiFp(this.configuration).register(request, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {LoginRequest} [request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public token(request?: LoginRequest, options?: any) {
        return AuthenticationApiFp(this.configuration).token(request, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [activationCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public validate(activationCode?: string, options?: any) {
        return AuthenticationApiFp(this.configuration).validate(activationCode, options)(this.fetch, this.basePath);
    }

}

/**
 * BotManagerApi - fetch parameter creator
 * @export
 */
export const BotManagerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CardToUseInOrderViewModel} [cardToUse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCardToUseInOrders(cardToUse?: CardToUseInOrderViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/api/BotManager/addCardToUseInOrders`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CardToUseInOrderViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(cardToUse || {}) : (cardToUse || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SimpleBotSettingsViewModel} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIfMarketIsOpen(settings?: SimpleBotSettingsViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/api/BotManager/Check`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SimpleBotSettingsViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(settings || {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BotSettings} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewBot(settings?: BotSettings, options: any = {}): FetchArgs {
            const localVarPath = `/api/BotManager`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BotSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(settings || {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CardToUseInOrderViewModel} [cardToUse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCardToUseInOrders(cardToUse?: CardToUseInOrderViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/api/BotManager/deleteCardToUseInOrders`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CardToUseInOrderViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(cardToUse || {}) : (cardToUse || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBot(botId: string, options: any = {}): FetchArgs {
            // verify required parameter 'botId' is not null or undefined
            if (botId === null || botId === undefined) {
                throw new RequiredError('botId', 'Required parameter botId was null or undefined when calling getBot.');
            }
            const localVarPath = `/api/BotManager/{botId}`
                .replace(`{${"botId"}}`, encodeURIComponent(String(botId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} botId 
         * @param {string} pile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBotPile(botId: string, pile: string, options: any = {}): FetchArgs {
            // verify required parameter 'botId' is not null or undefined
            if (botId === null || botId === undefined) {
                throw new RequiredError('botId', 'Required parameter botId was null or undefined when calling getBotPile.');
            }
            // verify required parameter 'pile' is not null or undefined
            if (pile === null || pile === undefined) {
                throw new RequiredError('pile', 'Required parameter pile was null or undefined when calling getBotPile.');
            }
            const localVarPath = `/api/BotManager/{botId}/{pile}`
                .replace(`{${"botId"}}`, encodeURIComponent(String(botId)))
                .replace(`{${"pile"}}`, encodeURIComponent(String(pile)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBots(options: any = {}): FetchArgs {
            const localVarPath = `/api/BotManager`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsToUseInOrders(options: any = {}): FetchArgs {
            const localVarPath = `/api/BotManager/getCardsToUseInOrders`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBot(botId: string, options: any = {}): FetchArgs {
            // verify required parameter 'botId' is not null or undefined
            if (botId === null || botId === undefined) {
                throw new RequiredError('botId', 'Required parameter botId was null or undefined when calling removeBot.');
            }
            const localVarPath = `/api/BotManager/{botId}`
                .replace(`{${"botId"}}`, encodeURIComponent(String(botId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startBot(botId: string, options: any = {}): FetchArgs {
            // verify required parameter 'botId' is not null or undefined
            if (botId === null || botId === undefined) {
                throw new RequiredError('botId', 'Required parameter botId was null or undefined when calling startBot.');
            }
            const localVarPath = `/api/BotManager/{botId}/Start`
                .replace(`{${"botId"}}`, encodeURIComponent(String(botId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopBot(botId: string, options: any = {}): FetchArgs {
            // verify required parameter 'botId' is not null or undefined
            if (botId === null || botId === undefined) {
                throw new RequiredError('botId', 'Required parameter botId was null or undefined when calling stopBot.');
            }
            const localVarPath = `/api/BotManager/{botId}/Stop`
                .replace(`{${"botId"}}`, encodeURIComponent(String(botId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BotSettingsViewModel} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBotSettings(settings?: BotSettingsViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/api/BotManager`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BotSettingsViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(settings || {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CardToUseInOrderViewModel} [cardToUse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCardToUseInOrders(cardToUse?: CardToUseInOrderViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/api/BotManager/updateCardToUseInOrders`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CardToUseInOrderViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(cardToUse || {}) : (cardToUse || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BotManagerApi - functional programming interface
 * @export
 */
export const BotManagerApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CardToUseInOrderViewModel} [cardToUse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCardToUseInOrders(cardToUse?: CardToUseInOrderViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = BotManagerApiFetchParamCreator(configuration).addCardToUseInOrders(cardToUse, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {SimpleBotSettingsViewModel} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIfMarketIsOpen(settings?: SimpleBotSettingsViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = BotManagerApiFetchParamCreator(configuration).checkIfMarketIsOpen(settings, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {BotSettings} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewBot(settings?: BotSettings, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = BotManagerApiFetchParamCreator(configuration).createNewBot(settings, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {CardToUseInOrderViewModel} [cardToUse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCardToUseInOrders(cardToUse?: CardToUseInOrderViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = BotManagerApiFetchParamCreator(configuration).deleteCardToUseInOrders(cardToUse, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBot(botId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BotViewModel> {
            const localVarFetchArgs = BotManagerApiFetchParamCreator(configuration).getBot(botId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} botId 
         * @param {string} pile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBotPile(botId: string, pile: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = BotManagerApiFetchParamCreator(configuration).getBotPile(botId, pile, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBots(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<BotViewModel>> {
            const localVarFetchArgs = BotManagerApiFetchParamCreator(configuration).getBots(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsToUseInOrders(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = BotManagerApiFetchParamCreator(configuration).getCardsToUseInOrders(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBot(botId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = BotManagerApiFetchParamCreator(configuration).removeBot(botId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startBot(botId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = BotManagerApiFetchParamCreator(configuration).startBot(botId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopBot(botId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = BotManagerApiFetchParamCreator(configuration).stopBot(botId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {BotSettingsViewModel} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBotSettings(settings?: BotSettingsViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = BotManagerApiFetchParamCreator(configuration).updateBotSettings(settings, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {CardToUseInOrderViewModel} [cardToUse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCardToUseInOrders(cardToUse?: CardToUseInOrderViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = BotManagerApiFetchParamCreator(configuration).updateCardToUseInOrders(cardToUse, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BotManagerApi - factory interface
 * @export
 */
export const BotManagerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {CardToUseInOrderViewModel} [cardToUse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCardToUseInOrders(cardToUse?: CardToUseInOrderViewModel, options?: any) {
            return BotManagerApiFp(configuration).addCardToUseInOrders(cardToUse, options)(fetch, basePath);
        },
        /**
         * 
         * @param {SimpleBotSettingsViewModel} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIfMarketIsOpen(settings?: SimpleBotSettingsViewModel, options?: any) {
            return BotManagerApiFp(configuration).checkIfMarketIsOpen(settings, options)(fetch, basePath);
        },
        /**
         * 
         * @param {BotSettings} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewBot(settings?: BotSettings, options?: any) {
            return BotManagerApiFp(configuration).createNewBot(settings, options)(fetch, basePath);
        },
        /**
         * 
         * @param {CardToUseInOrderViewModel} [cardToUse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCardToUseInOrders(cardToUse?: CardToUseInOrderViewModel, options?: any) {
            return BotManagerApiFp(configuration).deleteCardToUseInOrders(cardToUse, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBot(botId: string, options?: any) {
            return BotManagerApiFp(configuration).getBot(botId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} botId 
         * @param {string} pile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBotPile(botId: string, pile: string, options?: any) {
            return BotManagerApiFp(configuration).getBotPile(botId, pile, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBots(options?: any) {
            return BotManagerApiFp(configuration).getBots(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardsToUseInOrders(options?: any) {
            return BotManagerApiFp(configuration).getCardsToUseInOrders(options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBot(botId: string, options?: any) {
            return BotManagerApiFp(configuration).removeBot(botId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startBot(botId: string, options?: any) {
            return BotManagerApiFp(configuration).startBot(botId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopBot(botId: string, options?: any) {
            return BotManagerApiFp(configuration).stopBot(botId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {BotSettingsViewModel} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBotSettings(settings?: BotSettingsViewModel, options?: any) {
            return BotManagerApiFp(configuration).updateBotSettings(settings, options)(fetch, basePath);
        },
        /**
         * 
         * @param {CardToUseInOrderViewModel} [cardToUse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCardToUseInOrders(cardToUse?: CardToUseInOrderViewModel, options?: any) {
            return BotManagerApiFp(configuration).updateCardToUseInOrders(cardToUse, options)(fetch, basePath);
        },
    };
};

/**
 * BotManagerApi - object-oriented interface
 * @export
 * @class BotManagerApi
 * @extends {BaseAPI}
 */
export class BotManagerApi extends BaseAPI {
    /**
     * 
     * @param {CardToUseInOrderViewModel} [cardToUse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotManagerApi
     */
    public addCardToUseInOrders(cardToUse?: CardToUseInOrderViewModel, options?: any) {
        return BotManagerApiFp(this.configuration).addCardToUseInOrders(cardToUse, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {SimpleBotSettingsViewModel} [settings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotManagerApi
     */
    public checkIfMarketIsOpen(settings?: SimpleBotSettingsViewModel, options?: any) {
        return BotManagerApiFp(this.configuration).checkIfMarketIsOpen(settings, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {BotSettings} [settings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotManagerApi
     */
    public createNewBot(settings?: BotSettings, options?: any) {
        return BotManagerApiFp(this.configuration).createNewBot(settings, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {CardToUseInOrderViewModel} [cardToUse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotManagerApi
     */
    public deleteCardToUseInOrders(cardToUse?: CardToUseInOrderViewModel, options?: any) {
        return BotManagerApiFp(this.configuration).deleteCardToUseInOrders(cardToUse, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} botId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotManagerApi
     */
    public getBot(botId: string, options?: any) {
        return BotManagerApiFp(this.configuration).getBot(botId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} botId 
     * @param {string} pile 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotManagerApi
     */
    public getBotPile(botId: string, pile: string, options?: any) {
        return BotManagerApiFp(this.configuration).getBotPile(botId, pile, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotManagerApi
     */
    public getBots(options?: any) {
        return BotManagerApiFp(this.configuration).getBots(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotManagerApi
     */
    public getCardsToUseInOrders(options?: any) {
        return BotManagerApiFp(this.configuration).getCardsToUseInOrders(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} botId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotManagerApi
     */
    public removeBot(botId: string, options?: any) {
        return BotManagerApiFp(this.configuration).removeBot(botId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} botId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotManagerApi
     */
    public startBot(botId: string, options?: any) {
        return BotManagerApiFp(this.configuration).startBot(botId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} botId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotManagerApi
     */
    public stopBot(botId: string, options?: any) {
        return BotManagerApiFp(this.configuration).stopBot(botId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {BotSettingsViewModel} [settings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotManagerApi
     */
    public updateBotSettings(settings?: BotSettingsViewModel, options?: any) {
        return BotManagerApiFp(this.configuration).updateBotSettings(settings, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {CardToUseInOrderViewModel} [cardToUse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotManagerApi
     */
    public updateCardToUseInOrders(cardToUse?: CardToUseInOrderViewModel, options?: any) {
        return BotManagerApiFp(this.configuration).updateCardToUseInOrders(cardToUse, options)(this.fetch, this.basePath);
    }

}

/**
 * OrderApi - fetch parameter creator
 * @export
 */
export const OrderApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TransactionViewModel} [transaction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransaction(transaction?: TransactionViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/api/Order`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TransactionViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(transaction || {}) : (transaction || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(page: number, options: any = {}): FetchArgs {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page', 'Required parameter page was null or undefined when calling getOrders.');
            }
            const localVarPath = `/api/Order/{page}`
                .replace(`{${"page"}}`, encodeURIComponent(String(page)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TransactionViewModel} [transaction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionPreview(transaction?: TransactionViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/api/Order/GetTransactionPreview`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TransactionViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(transaction || {}) : (transaction || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactions(page: number, options: any = {}): FetchArgs {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page', 'Required parameter page was null or undefined when calling getTransactions.');
            }
            const localVarPath = `/api/Order/Transactions/{page}`
                .replace(`{${"page"}}`, encodeURIComponent(String(page)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OrderViewModel} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerOrder(order?: OrderViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/api/Order/register`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"OrderViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(order || {}) : (order || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TransactionViewModel} [transaction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransaction(transaction?: TransactionViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).createTransaction(transaction, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(page: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<OrderViewModel>> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).getOrders(page, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {TransactionViewModel} [transaction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionPreview(transaction?: TransactionViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TransactionReviewViewModel> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).getTransactionPreview(transaction, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactions(page: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<TransactionViewModel>> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).getTransactions(page, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {OrderViewModel} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerOrder(order?: OrderViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = OrderApiFetchParamCreator(configuration).registerOrder(order, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {TransactionViewModel} [transaction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransaction(transaction?: TransactionViewModel, options?: any) {
            return OrderApiFp(configuration).createTransaction(transaction, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(page: number, options?: any) {
            return OrderApiFp(configuration).getOrders(page, options)(fetch, basePath);
        },
        /**
         * 
         * @param {TransactionViewModel} [transaction] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionPreview(transaction?: TransactionViewModel, options?: any) {
            return OrderApiFp(configuration).getTransactionPreview(transaction, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactions(page: number, options?: any) {
            return OrderApiFp(configuration).getTransactions(page, options)(fetch, basePath);
        },
        /**
         * 
         * @param {OrderViewModel} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerOrder(order?: OrderViewModel, options?: any) {
            return OrderApiFp(configuration).registerOrder(order, options)(fetch, basePath);
        },
    };
};

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     * 
     * @param {TransactionViewModel} [transaction] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public createTransaction(transaction?: TransactionViewModel, options?: any) {
        return OrderApiFp(this.configuration).createTransaction(transaction, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} page 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getOrders(page: number, options?: any) {
        return OrderApiFp(this.configuration).getOrders(page, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {TransactionViewModel} [transaction] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getTransactionPreview(transaction?: TransactionViewModel, options?: any) {
        return OrderApiFp(this.configuration).getTransactionPreview(transaction, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} page 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getTransactions(page: number, options?: any) {
        return OrderApiFp(this.configuration).getTransactions(page, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {OrderViewModel} [order] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public registerOrder(order?: OrderViewModel, options?: any) {
        return OrderApiFp(this.configuration).registerOrder(order, options)(this.fetch, this.basePath);
    }

}

/**
 * SellingApiApi - fetch parameter creator
 * @export
 */
export const SellingApiApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AccountSettingsViewModel} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configure(settings?: AccountSettingsViewModel, options: any = {}): FetchArgs {
            const localVarPath = `/api/SellingApi/Configure`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AccountSettingsViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(settings || {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(options: any = {}): FetchArgs {
            const localVarPath = `/api/SellingApi`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stop(options: any = {}): FetchArgs {
            const localVarPath = `/api/SellingApi/Stop`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SellingApiApi - functional programming interface
 * @export
 */
export const SellingApiApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AccountSettingsViewModel} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configure(settings?: AccountSettingsViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SellingApiApiFetchParamCreator(configuration).configure(settings, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ActiveSellingApiViewModel> {
            const localVarFetchArgs = SellingApiApiFetchParamCreator(configuration).get(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stop(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SellingApiApiFetchParamCreator(configuration).stop(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SellingApiApi - factory interface
 * @export
 */
export const SellingApiApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {AccountSettingsViewModel} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configure(settings?: AccountSettingsViewModel, options?: any) {
            return SellingApiApiFp(configuration).configure(settings, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(options?: any) {
            return SellingApiApiFp(configuration).get(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stop(options?: any) {
            return SellingApiApiFp(configuration).stop(options)(fetch, basePath);
        },
    };
};

/**
 * SellingApiApi - object-oriented interface
 * @export
 * @class SellingApiApi
 * @extends {BaseAPI}
 */
export class SellingApiApi extends BaseAPI {
    /**
     * 
     * @param {AccountSettingsViewModel} [settings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellingApiApi
     */
    public configure(settings?: AccountSettingsViewModel, options?: any) {
        return SellingApiApiFp(this.configuration).configure(settings, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellingApiApi
     */
    public get(options?: any) {
        return SellingApiApiFp(this.configuration).get(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellingApiApi
     */
    public stop(options?: any) {
        return SellingApiApiFp(this.configuration).stop(options)(this.fetch, this.basePath);
    }

}

/**
 * TransactionApi - fetch parameter creator
 * @export
 */
export const TransactionApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} transactionId 
         * @param {BotSettings} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configureAutoTransaction(transactionId: string, settings?: BotSettings, options: any = {}): FetchArgs {
            // verify required parameter 'transactionId' is not null or undefined
            if (transactionId === null || transactionId === undefined) {
                throw new RequiredError('transactionId', 'Required parameter transactionId was null or undefined when calling configureAutoTransaction.');
            }
            const localVarPath = `/api/Transaction/{transactionId}/Configure`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BotSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(settings || {}) : (settings || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoTransaction(transactionId: string, options: any = {}): FetchArgs {
            // verify required parameter 'transactionId' is not null or undefined
            if (transactionId === null || transactionId === undefined) {
                throw new RequiredError('transactionId', 'Required parameter transactionId was null or undefined when calling getAutoTransaction.');
            }
            const localVarPath = `/api/Transaction/{transactionId}/Auto`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuggestion(transactionId: string, options: any = {}): FetchArgs {
            // verify required parameter 'transactionId' is not null or undefined
            if (transactionId === null || transactionId === undefined) {
                throw new RequiredError('transactionId', 'Required parameter transactionId was null or undefined when calling getSuggestion.');
            }
            const localVarPath = `/api/Transaction/{transactionId}/suggestion`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransaction(transactionId: string, options: any = {}): FetchArgs {
            // verify required parameter 'transactionId' is not null or undefined
            if (transactionId === null || transactionId === undefined) {
                throw new RequiredError('transactionId', 'Required parameter transactionId was null or undefined when calling getTransaction.');
            }
            const localVarPath = `/api/Transaction/{transactionId}`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} publicKey 
         * @param {number} timestamp 
         * @param {string} thumbprint 
         * @param {number} maxPrice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pop(publicKey: string, timestamp: number, thumbprint: string, maxPrice: number, options: any = {}): FetchArgs {
            // verify required parameter 'publicKey' is not null or undefined
            if (publicKey === null || publicKey === undefined) {
                throw new RequiredError('publicKey', 'Required parameter publicKey was null or undefined when calling pop.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp', 'Required parameter timestamp was null or undefined when calling pop.');
            }
            // verify required parameter 'thumbprint' is not null or undefined
            if (thumbprint === null || thumbprint === undefined) {
                throw new RequiredError('thumbprint', 'Required parameter thumbprint was null or undefined when calling pop.');
            }
            // verify required parameter 'maxPrice' is not null or undefined
            if (maxPrice === null || maxPrice === undefined) {
                throw new RequiredError('maxPrice', 'Required parameter maxPrice was null or undefined when calling pop.');
            }
            const localVarPath = `/api/Transaction/pop/{publicKey}/{timestamp}/{thumbprint}/{maxPrice}`
                .replace(`{${"publicKey"}}`, encodeURIComponent(String(publicKey)))
                .replace(`{${"timestamp"}}`, encodeURIComponent(String(timestamp)))
                .replace(`{${"thumbprint"}}`, encodeURIComponent(String(thumbprint)))
                .replace(`{${"maxPrice"}}`, encodeURIComponent(String(maxPrice)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} transactionId 
         * @param {OrderViewModel} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerOrder(transactionId: string, order?: OrderViewModel, options: any = {}): FetchArgs {
            // verify required parameter 'transactionId' is not null or undefined
            if (transactionId === null || transactionId === undefined) {
                throw new RequiredError('transactionId', 'Required parameter transactionId was null or undefined when calling registerOrder.');
            }
            const localVarPath = `/api/Transaction/{transactionId}`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"OrderViewModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(order || {}) : (order || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} transactionId 
         * @param {Array<BackupCode>} [backupCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAutoTransaction(transactionId: string, backupCode?: Array<BackupCode>, options: any = {}): FetchArgs {
            // verify required parameter 'transactionId' is not null or undefined
            if (transactionId === null || transactionId === undefined) {
                throw new RequiredError('transactionId', 'Required parameter transactionId was null or undefined when calling startAutoTransaction.');
            }
            const localVarPath = `/api/Transaction/{transactionId}/Start`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;BackupCode&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(backupCode || {}) : (backupCode || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopAutoTransaction(transactionId: string, options: any = {}): FetchArgs {
            // verify required parameter 'transactionId' is not null or undefined
            if (transactionId === null || transactionId === undefined) {
                throw new RequiredError('transactionId', 'Required parameter transactionId was null or undefined when calling stopAutoTransaction.');
            }
            const localVarPath = `/api/Transaction/{transactionId}/Stop`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionApi - functional programming interface
 * @export
 */
export const TransactionApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} transactionId 
         * @param {BotSettings} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configureAutoTransaction(transactionId: string, settings?: BotSettings, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TransactionApiFetchParamCreator(configuration).configureAutoTransaction(transactionId, settings, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoTransaction(transactionId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TransactionApiFetchParamCreator(configuration).getAutoTransaction(transactionId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuggestion(transactionId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TransactionApiFetchParamCreator(configuration).getSuggestion(transactionId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransaction(transactionId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TransactionViewModel> {
            const localVarFetchArgs = TransactionApiFetchParamCreator(configuration).getTransaction(transactionId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} publicKey 
         * @param {number} timestamp 
         * @param {string} thumbprint 
         * @param {number} maxPrice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pop(publicKey: string, timestamp: number, thumbprint: string, maxPrice: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReverseOrderViewModel> {
            const localVarFetchArgs = TransactionApiFetchParamCreator(configuration).pop(publicKey, timestamp, thumbprint, maxPrice, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} transactionId 
         * @param {OrderViewModel} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerOrder(transactionId: string, order?: OrderViewModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TransactionApiFetchParamCreator(configuration).registerOrder(transactionId, order, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} transactionId 
         * @param {Array<BackupCode>} [backupCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAutoTransaction(transactionId: string, backupCode?: Array<BackupCode>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TransactionApiFetchParamCreator(configuration).startAutoTransaction(transactionId, backupCode, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopAutoTransaction(transactionId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TransactionApiFetchParamCreator(configuration).stopAutoTransaction(transactionId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TransactionApi - factory interface
 * @export
 */
export const TransactionApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} transactionId 
         * @param {BotSettings} [settings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configureAutoTransaction(transactionId: string, settings?: BotSettings, options?: any) {
            return TransactionApiFp(configuration).configureAutoTransaction(transactionId, settings, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoTransaction(transactionId: string, options?: any) {
            return TransactionApiFp(configuration).getAutoTransaction(transactionId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuggestion(transactionId: string, options?: any) {
            return TransactionApiFp(configuration).getSuggestion(transactionId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransaction(transactionId: string, options?: any) {
            return TransactionApiFp(configuration).getTransaction(transactionId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} publicKey 
         * @param {number} timestamp 
         * @param {string} thumbprint 
         * @param {number} maxPrice 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pop(publicKey: string, timestamp: number, thumbprint: string, maxPrice: number, options?: any) {
            return TransactionApiFp(configuration).pop(publicKey, timestamp, thumbprint, maxPrice, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} transactionId 
         * @param {OrderViewModel} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerOrder(transactionId: string, order?: OrderViewModel, options?: any) {
            return TransactionApiFp(configuration).registerOrder(transactionId, order, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} transactionId 
         * @param {Array<BackupCode>} [backupCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAutoTransaction(transactionId: string, backupCode?: Array<BackupCode>, options?: any) {
            return TransactionApiFp(configuration).startAutoTransaction(transactionId, backupCode, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopAutoTransaction(transactionId: string, options?: any) {
            return TransactionApiFp(configuration).stopAutoTransaction(transactionId, options)(fetch, basePath);
        },
    };
};

/**
 * TransactionApi - object-oriented interface
 * @export
 * @class TransactionApi
 * @extends {BaseAPI}
 */
export class TransactionApi extends BaseAPI {
    /**
     * 
     * @param {string} transactionId 
     * @param {BotSettings} [settings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApi
     */
    public configureAutoTransaction(transactionId: string, settings?: BotSettings, options?: any) {
        return TransactionApiFp(this.configuration).configureAutoTransaction(transactionId, settings, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} transactionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApi
     */
    public getAutoTransaction(transactionId: string, options?: any) {
        return TransactionApiFp(this.configuration).getAutoTransaction(transactionId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} transactionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApi
     */
    public getSuggestion(transactionId: string, options?: any) {
        return TransactionApiFp(this.configuration).getSuggestion(transactionId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} transactionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApi
     */
    public getTransaction(transactionId: string, options?: any) {
        return TransactionApiFp(this.configuration).getTransaction(transactionId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} publicKey 
     * @param {number} timestamp 
     * @param {string} thumbprint 
     * @param {number} maxPrice 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApi
     */
    public pop(publicKey: string, timestamp: number, thumbprint: string, maxPrice: number, options?: any) {
        return TransactionApiFp(this.configuration).pop(publicKey, timestamp, thumbprint, maxPrice, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} transactionId 
     * @param {OrderViewModel} [order] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApi
     */
    public registerOrder(transactionId: string, order?: OrderViewModel, options?: any) {
        return TransactionApiFp(this.configuration).registerOrder(transactionId, order, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} transactionId 
     * @param {Array<BackupCode>} [backupCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApi
     */
    public startAutoTransaction(transactionId: string, backupCode?: Array<BackupCode>, options?: any) {
        return TransactionApiFp(this.configuration).startAutoTransaction(transactionId, backupCode, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} transactionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApi
     */
    public stopAutoTransaction(transactionId: string, options?: any) {
        return TransactionApiFp(this.configuration).stopAutoTransaction(transactionId, options)(this.fetch, this.basePath);
    }

}

