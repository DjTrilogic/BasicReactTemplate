/**
 * Fut Bot
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AccountSettings
 */
export interface AccountSettings {
    /**
     * 
     * @type {number}
     * @memberof AccountSettings
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof AccountSettings
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountSettings
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountSettings
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountSettings
     */
    guid?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AccountSettings
     */
    active?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AccountSettings
     */
    boughtOctofutiums?: number;
    /**
     * 
     * @type {number}
     * @memberof AccountSettings
     */
    totalExecutionTime?: number;
    /**
     * 
     * @type {string}
     * @memberof AccountSettings
     */
    activationCode?: string;
    /**
     * 
     * @type {Array<BotSettings>}
     * @memberof AccountSettings
     */
    settings?: Array<BotSettings>;
    /**
     * 
     * @type {AccountSettings}
     * @memberof AccountSettings
     */
    referer?: AccountSettings;
    /**
     * 
     * @type {string}
     * @memberof AccountSettings
     */
    referalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountSettings
     */
    role?: RoleEnum;
    /**
     * 
     * @type {Date}
     * @memberof AccountSettings
     */
    creationDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AccountSettings
     */
    lastLogOn?: Date;
}


export enum RoleEnum {
    User = <any>'User',
    Administrator = <any>'Administrator'
}

/**
 * 
 * @export
 * @interface BackupCode
 */
export interface BackupCode {
    /**
     * 
     * @type {number}
     * @memberof BackupCode
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof BackupCode
     */
    value?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BackupCode
     */
    isUsed?: boolean;
}

/**
 * 
 * @export
 * @interface BotSettings
 */
export interface BotSettings {
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    secretAnswer?: string;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    platform?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    appVersion?: number;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    fetchEmail?: string;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    fetchPassword?: string;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    fetchHost?: string;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    fetchPort?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BotSettings
     */
    fetchIsSSL?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BotSettings
     */
    registerSoldItems?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    shopListSettingsId?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    accountSettingsId?: number;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    guid?: string;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    mode?: ModeEnum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    codeFetchingMode?: CodeFetchingModeEnum;
    /**
     * 
     * @type {Array<BackupCode>}
     * @memberof BotSettings
     */
    backupCodes?: Array<BackupCode>;
    /**
     * 
     * @type {Array<BuyTreshold>}
     * @memberof BotSettings
     */
    buyTresholds?: Array<BuyTreshold>;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    overSellingSteps?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    buyingOtherwisePercentage?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    maxOrderSpent?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BotSettings
     */
    shouldHandleOrders?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BotSettings
     */
    useSchedule?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    maxNumberOfSameCard?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    maxRequestCountBySession?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    minRestingDelay?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    maxRestingDelay?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    minDelayBetweenRequests?: number;
    /**
     * 
     * @type {number}
     * @memberof BotSettings
     */
    maxDelayBetweenRequests?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BotSettings
     */
    autoSolveCaptchas?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot0?: Slot0Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot1?: Slot1Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot2?: Slot2Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot3?: Slot3Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot4?: Slot4Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot5?: Slot5Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot6?: Slot6Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot7?: Slot7Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot8?: Slot8Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot9?: Slot9Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot10?: Slot10Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot11?: Slot11Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot12?: Slot12Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot13?: Slot13Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot14?: Slot14Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot15?: Slot15Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot16?: Slot16Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot17?: Slot17Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot18?: Slot18Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot19?: Slot19Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot20?: Slot20Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot21?: Slot21Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot22?: Slot22Enum;
    /**
     * 
     * @type {string}
     * @memberof BotSettings
     */
    slot23?: Slot23Enum;
}


/**
 * @export
 * @enum {string}
 */
export enum ModeEnum {
    PlayerSnipping = <any>'PlayerSnipping',
    PlayerBidding = <any>'PlayerBidding',
    SquadFormSnipping = <any>'SquadFormSnipping',
    TradeOnly = <any>'TradeOnly'
}
/**
 * @export
 * @enum {string}
 */
export enum CodeFetchingModeEnum {
    IMAP = <any>'IMAP',
    BackupCodes = <any>'BackupCodes',
    Manual = <any>'Manual'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot0Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot1Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot2Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot3Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot4Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot5Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot6Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot7Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot8Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot9Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot10Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot11Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot12Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot13Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot14Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot15Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot16Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot17Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot18Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot19Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot20Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot21Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot22Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}
/**
 * @export
 * @enum {string}
 */
export enum Slot23Enum {
    Stopped = <any>'Stopped',
    Running = <any>'Running'
}

/**
 * 
 * @export
 * @interface BuyTreshold
 */
export interface BuyTreshold {
    /**
     * 
     * @type {number}
     * @memberof BuyTreshold
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof BuyTreshold
     */
    treshold?: number;
    /**
     * 
     * @type {number}
     * @memberof BuyTreshold
     */
    steps?: number;
}

/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    password?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LoginRequest
     */
    requireElevated?: boolean;
}

/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    token_type?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    access_token?: string;
    /**
     * 
     * @type {number}
     * @memberof LoginResponse
     */
    expiresIn?: number;
    /**
     * 
     * @type {boolean}
     * @memberof LoginResponse
     */
    success?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    errorMessage?: string;
    /**
     * 
     * @type {AccountSettings}
     * @memberof LoginResponse
     */
    settings?: AccountSettings;
    /**
     * 
     * @type {ServerInfo}
     * @memberof LoginResponse
     */
    serverInfo?: ServerInfo;
}

/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    passwordConfirmation?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    verification?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    referalCode?: string;
}

/**
 * 
 * @export
 * @interface RegisterResponse
 */
export interface RegisterResponse {
    /**
     * 
     * @type {boolean}
     * @memberof RegisterResponse
     */
    success?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RegisterResponse
     */
    errorMessage?: string;
}

/**
 * 
 * @export
 * @interface ServerInfo
 */
export interface ServerInfo {
    /**
     * 
     * @type {number}
     * @memberof ServerInfo
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ServerInfo
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ServerInfo
     */
    runtimeUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ServerInfo
     */
    statsUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ServerInfo
     */
    webSocketUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof ServerInfo
     */
    maxAccounts?: number;
    /**
     * 
     * @type {number}
     * @memberof ServerInfo
     */
    currentAccountsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof ServerInfo
     */
    currentBotsCount?: number;
}


/**
 * AuthenticationApi - fetch parameter creator
 * @export
 */
export const AuthenticationApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {RegisterRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(request?: RegisterRequest, options: any = {}): FetchArgs {
            const localVarPath = `/api/Authentication/Register`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RegisterRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        token(request?: LoginRequest, options: any = {}): FetchArgs {
            const localVarPath = `/api/Authentication/Token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LoginRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(request || {}) : (request || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [activationCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validate(activationCode?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/Authentication`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (activationCode !== undefined) {
                localVarQueryParameter['activationCode'] = activationCode;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {RegisterRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(request?: RegisterRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RegisterResponse> {
            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).register(request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {LoginRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        token(request?: LoginRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LoginResponse> {
            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).token(request, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [activationCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validate(activationCode?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).validate(activationCode, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {RegisterRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(request?: RegisterRequest, options?: any) {
            return AuthenticationApiFp(configuration).register(request, options)(fetch, basePath);
        },
        /**
         * 
         * @param {LoginRequest} [request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        token(request?: LoginRequest, options?: any) {
            return AuthenticationApiFp(configuration).token(request, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [activationCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validate(activationCode?: string, options?: any) {
            return AuthenticationApiFp(configuration).validate(activationCode, options)(fetch, basePath);
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @param {RegisterRequest} [request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public register(request?: RegisterRequest, options?: any) {
        return AuthenticationApiFp(this.configuration).register(request, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {LoginRequest} [request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public token(request?: LoginRequest, options?: any) {
        return AuthenticationApiFp(this.configuration).token(request, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [activationCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public validate(activationCode?: string, options?: any) {
        return AuthenticationApiFp(this.configuration).validate(activationCode, options)(this.fetch, this.basePath);
    }

}

/**
 * ServerApi - fetch parameter creator
 * @export
 */
export const ServerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [serverName] 
         * @param {number} [botsCount] 
         * @param {number} [accountsCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(serverName?: string, botsCount?: number, accountsCount?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/Server/Ping`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (serverName !== undefined) {
                localVarQueryParameter['ServerName'] = serverName;
            }

            if (botsCount !== undefined) {
                localVarQueryParameter['BotsCount'] = botsCount;
            }

            if (accountsCount !== undefined) {
                localVarQueryParameter['AccountsCount'] = accountsCount;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [runtimeUrl] 
         * @param {string} [statsUrl] 
         * @param {string} [webSocketUrl] 
         * @param {number} [maxAccounts] 
         * @param {number} [currentAccountsCount] 
         * @param {number} [currentBotsCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(id?: number, name?: string, runtimeUrl?: string, statsUrl?: string, webSocketUrl?: string, maxAccounts?: number, currentAccountsCount?: number, currentBotsCount?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/Server/Register`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (runtimeUrl !== undefined) {
                localVarQueryParameter['RuntimeUrl'] = runtimeUrl;
            }

            if (statsUrl !== undefined) {
                localVarQueryParameter['StatsUrl'] = statsUrl;
            }

            if (webSocketUrl !== undefined) {
                localVarQueryParameter['WebSocketUrl'] = webSocketUrl;
            }

            if (maxAccounts !== undefined) {
                localVarQueryParameter['MaxAccounts'] = maxAccounts;
            }

            if (currentAccountsCount !== undefined) {
                localVarQueryParameter['CurrentAccountsCount'] = currentAccountsCount;
            }

            if (currentBotsCount !== undefined) {
                localVarQueryParameter['CurrentBotsCount'] = currentBotsCount;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServerApi - functional programming interface
 * @export
 */
export const ServerApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [serverName] 
         * @param {number} [botsCount] 
         * @param {number} [accountsCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(serverName?: string, botsCount?: number, accountsCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ServerApiFetchParamCreator(configuration).ping(serverName, botsCount, accountsCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [runtimeUrl] 
         * @param {string} [statsUrl] 
         * @param {string} [webSocketUrl] 
         * @param {number} [maxAccounts] 
         * @param {number} [currentAccountsCount] 
         * @param {number} [currentBotsCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(id?: number, name?: string, runtimeUrl?: string, statsUrl?: string, webSocketUrl?: string, maxAccounts?: number, currentAccountsCount?: number, currentBotsCount?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ServerApiFetchParamCreator(configuration).register(id, name, runtimeUrl, statsUrl, webSocketUrl, maxAccounts, currentAccountsCount, currentBotsCount, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ServerApi - factory interface
 * @export
 */
export const ServerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} [serverName] 
         * @param {number} [botsCount] 
         * @param {number} [accountsCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(serverName?: string, botsCount?: number, accountsCount?: number, options?: any) {
            return ServerApiFp(configuration).ping(serverName, botsCount, accountsCount, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {string} [name] 
         * @param {string} [runtimeUrl] 
         * @param {string} [statsUrl] 
         * @param {string} [webSocketUrl] 
         * @param {number} [maxAccounts] 
         * @param {number} [currentAccountsCount] 
         * @param {number} [currentBotsCount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(id?: number, name?: string, runtimeUrl?: string, statsUrl?: string, webSocketUrl?: string, maxAccounts?: number, currentAccountsCount?: number, currentBotsCount?: number, options?: any) {
            return ServerApiFp(configuration).register(id, name, runtimeUrl, statsUrl, webSocketUrl, maxAccounts, currentAccountsCount, currentBotsCount, options)(fetch, basePath);
        },
    };
};

/**
 * ServerApi - object-oriented interface
 * @export
 * @class ServerApi
 * @extends {BaseAPI}
 */
export class ServerApi extends BaseAPI {
    /**
     * 
     * @param {string} [serverName] 
     * @param {number} [botsCount] 
     * @param {number} [accountsCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    public ping(serverName?: string, botsCount?: number, accountsCount?: number, options?: any) {
        return ServerApiFp(this.configuration).ping(serverName, botsCount, accountsCount, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} [id] 
     * @param {string} [name] 
     * @param {string} [runtimeUrl] 
     * @param {string} [statsUrl] 
     * @param {string} [webSocketUrl] 
     * @param {number} [maxAccounts] 
     * @param {number} [currentAccountsCount] 
     * @param {number} [currentBotsCount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    public register(id?: number, name?: string, runtimeUrl?: string, statsUrl?: string, webSocketUrl?: string, maxAccounts?: number, currentAccountsCount?: number, currentBotsCount?: number, options?: any) {
        return ServerApiFp(this.configuration).register(id, name, runtimeUrl, statsUrl, webSocketUrl, maxAccounts, currentAccountsCount, currentBotsCount, options)(this.fetch, this.basePath);
    }

}

